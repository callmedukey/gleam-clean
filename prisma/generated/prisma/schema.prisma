enum InquiryType {
  QUOTE
  OTHER
  EDUCATION
}

model Inquiry {
  id      String @id @default(cuid())
  name    String
  email   String
  phone   String
  message String

  type InquiryType @default(OTHER)

  read Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images Image[]
}

model Office {
  id      String @id @default(cuid())
  name    String
  address String
  phone   String
  hours   String
  mapUrl  String

  order Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(cuid())

  url    String
  width  Int
  height Int

  inquiry   Inquiry? @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  inquiryId String?

  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId String?   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlogPost {
  id      String @id @default(cuid())
  title   String
  badge   String
  content String

  published Boolean @default(false)

  order Int @default(0)

  url     String
  image   Image?
  imageId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model User {
  id       String  @id @default(cuid())
  name     String?
  username String?
  email    String  @unique
  password String?

  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
